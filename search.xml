<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start(https://hexo.io/docs/server.html) Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148# -*- coding: utf-8 -*-# -*- coding: utf-8 -*-from sqlalchemy.sql.functions import funcfrom sqlalchemy import Index, text, distinctfrom common.ins_db import db, DBLengthfrom datetime import datetimeclass AsoTaskConfig(db.Model): ''' 任务动作序列: 打开AppStore 1 搜索关键字 （多关键字） —— 刷关键字 2 购买 （点击购买后，取消下载） —— 刷购买量,需要apple账号（未购买过） 3 下载 （购买完成下载后，卸载应用） —— 刷下载量 4 评论 —— 刷评论,需要apple账号（未评论过） ''' __tablename__ = 'aso_task_config' id = db.Column(db.Integer, primary_key=True, autoincrement=True, index=True) # 目标app target_app_id = db.Column(db.Integer, db.ForeignKey('apple_app_info.id', ondelete='CASCADE', onupdate='CASCADE'), index=True) # 任务量级,0为不限量,&gt;0 限制量级 target_num = db.Column(db.Integer, nullable=False, default=0) # 任务起始时间 start_time = db.Column(db.DateTime, index=True) # 任务终止时间,不为空则是指不限量，在规定时间内刷，限量则达到目标则停止，无须设置此值 end_time = db.Column(db.DateTime, nullable=True) # 指定设备编号范围 device_num_range = db.Column(db.String(DBLength.String255), nullable=False, default='') # 指定关键字列表 keywords = db.Column(db.String(DBLength.String255), default='') # 指定任务动作序列,0即未指定动作,1搜索,2注册苹果账号,3下载,4评论 action = db.Column(db.Integer, default=0, index=True) # 计划状态：0.草稿,1.测试,2.上线,3.下架 task_status = db.Column(db.Integer, default=0, index=True) # 任务配置创建时间 insert_time = db.Column(db.DateTime, default=datetime.now, index=True) # 创建人 creator_id = db.Column(db.String(DBLength.SHORT_UUID), db.ForeignKey('auth_account.id', ondelete='SET NULL', onupdate='CASCADE'), index=True) # 超时时间 time_out = db.Column(db.Integer, default=180) # 进度百分比 down_process = db.Column(db.Float, default=0.02) # 账号设备绑定关系名 boundle_relation_name = db.Column(db.String(DBLength.String255), nullable=True) register_data = db.Column(db.String(600), default='') # 是否改机 is_change_info = db.Column(db.Boolean, default=True, nullable=True) is_clear = db.Column(db.Boolean, default=True, server_default=text('1')) # VPN is_vpn = db.Column(db.Boolean, default=True, server_default=text('1'))class TaskStatusInfo(db.Model): ''' 接取任务创建记录 ''' __tablename__ = 'task_status_info' __table_args__ = ( Index('ix_task_id_status', 'task_id', 'status'), Index('ix_is_taken_away', 'udid', 'apple_account', 'task_id'), Index('ix_is_time_task', 'create_time', 'task_id'), ) id = db.Column(db.Integer, primary_key=True, autoincrement=True, index=True) # 真机udid udid = db.Column(db.String(DBLength.String255), nullable=False) # 苹果账号 apple_account = db.Column(db.String(DBLength.String255), nullable=False) # 改机用的udid UniqueDeviceID = db.Column(db.String(DBLength.String255), nullable=True) # 任务id task_id = db.Column(db.Integer, default=0) # 任务状态码 ，默认为0，即未知（接取任务），1为完成，2为异常 status = db.Column(db.Integer, default=0) # 状态码的解释说明 status_info = db.Column(db.Text, nullable=True) # 接取任务时间 create_time = db.Column(db.DateTime, default=datetime.now) # 任务上报时间 end_time = db.Column(db.DateTime, nullable=True)def get_task_config_by_id(pk): task_config = AsoTaskConfig.query.filter_by(id=pk).first() return task_configdef get_task_config_by_app_id(app_id): task_config = AsoTaskConfig.query.filter_by(target_app_id=app_id).first() return task_configdef get_task_status_by_id(pk): task_status = TaskStatusInfo.query.filter_by(id=pk).first() return task_statusdef get_total_status_num_by_task_id(task_id): total_number = db.session.query(func.count(TaskStatusInfo.id).label('total_number'), func.count(distinct(TaskStatusInfo.apple_account)).label('actual_account_total') ).filter_by(task_id=task_id).first() return total_numberdef get_completed_status_by_task_id(task_id): completed_number = db.session.query(func.count(TaskStatusInfo.id).label('completed_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_completed_number')).filter_by(task_id=task_id, status=1).first() return completed_numberdef get_exception_status_by_task_id(task_id): exception_number = db.session.query(func.count(TaskStatusInfo.id).label('exception_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_exception_number')).filter_by(task_id=task_id, status=2).first() return exception_numberdef get_run_status_by_task_id(task_id): run_number = db.session.query(func.count(TaskStatusInfo.id).label('run_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_run_number')).filter_by(task_id=task_id, status=0).first() return run_numberdef get_task_status_by_udid_account_task_id(udid, account, task_id): task_status = TaskStatusInfo.query.filter_by(udid=udid, apple_account=account, task_id=task_id).order_by( TaskStatusInfo.create_time.desc()).first() return task_statusdef main(): passa =1if __name__ == '__main__': main() Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F25%2Fxx%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start(https://hexo.io/docs/server.html) Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148# -*- coding: utf-8 -*-# -*- coding: utf-8 -*-from sqlalchemy.sql.functions import funcfrom sqlalchemy import Index, text, distinctfrom common.ins_db import db, DBLengthfrom datetime import datetimeclass AsoTaskConfig(db.Model): ''' 任务动作序列: 打开AppStore 1 搜索关键字 （多关键字） —— 刷关键字 2 购买 （点击购买后，取消下载） —— 刷购买量,需要apple账号（未购买过） 3 下载 （购买完成下载后，卸载应用） —— 刷下载量 4 评论 —— 刷评论,需要apple账号（未评论过） ''' __tablename__ = 'aso_task_config' id = db.Column(db.Integer, primary_key=True, autoincrement=True, index=True) # 目标app target_app_id = db.Column(db.Integer, db.ForeignKey('apple_app_info.id', ondelete='CASCADE', onupdate='CASCADE'), index=True) # 任务量级,0为不限量,&gt;0 限制量级 target_num = db.Column(db.Integer, nullable=False, default=0) # 任务起始时间 start_time = db.Column(db.DateTime, index=True) # 任务终止时间,不为空则是指不限量，在规定时间内刷，限量则达到目标则停止，无须设置此值 end_time = db.Column(db.DateTime, nullable=True) # 指定设备编号范围 device_num_range = db.Column(db.String(DBLength.String255), nullable=False, default='') # 指定关键字列表 keywords = db.Column(db.String(DBLength.String255), default='') # 指定任务动作序列,0即未指定动作,1搜索,2注册苹果账号,3下载,4评论 action = db.Column(db.Integer, default=0, index=True) # 计划状态：0.草稿,1.测试,2.上线,3.下架 task_status = db.Column(db.Integer, default=0, index=True) # 任务配置创建时间 insert_time = db.Column(db.DateTime, default=datetime.now, index=True) # 创建人 creator_id = db.Column(db.String(DBLength.SHORT_UUID), db.ForeignKey('auth_account.id', ondelete='SET NULL', onupdate='CASCADE'), index=True) # 超时时间 time_out = db.Column(db.Integer, default=180) # 进度百分比 down_process = db.Column(db.Float, default=0.02) # 账号设备绑定关系名 boundle_relation_name = db.Column(db.String(DBLength.String255), nullable=True) register_data = db.Column(db.String(600), default='') # 是否改机 is_change_info = db.Column(db.Boolean, default=True, nullable=True) is_clear = db.Column(db.Boolean, default=True, server_default=text('1')) # VPN is_vpn = db.Column(db.Boolean, default=True, server_default=text('1'))class TaskStatusInfo(db.Model): ''' 接取任务创建记录 ''' __tablename__ = 'task_status_info' __table_args__ = ( Index('ix_task_id_status', 'task_id', 'status'), Index('ix_is_taken_away', 'udid', 'apple_account', 'task_id'), Index('ix_is_time_task', 'create_time', 'task_id'), ) id = db.Column(db.Integer, primary_key=True, autoincrement=True, index=True) # 真机udid udid = db.Column(db.String(DBLength.String255), nullable=False) # 苹果账号 apple_account = db.Column(db.String(DBLength.String255), nullable=False) # 改机用的udid UniqueDeviceID = db.Column(db.String(DBLength.String255), nullable=True) # 任务id task_id = db.Column(db.Integer, default=0) # 任务状态码 ，默认为0，即未知（接取任务），1为完成，2为异常 status = db.Column(db.Integer, default=0) # 状态码的解释说明 status_info = db.Column(db.Text, nullable=True) # 接取任务时间 create_time = db.Column(db.DateTime, default=datetime.now) # 任务上报时间 end_time = db.Column(db.DateTime, nullable=True)def get_task_config_by_id(pk): task_config = AsoTaskConfig.query.filter_by(id=pk).first() return task_configdef get_task_config_by_app_id(app_id): task_config = AsoTaskConfig.query.filter_by(target_app_id=app_id).first() return task_configdef get_task_status_by_id(pk): task_status = TaskStatusInfo.query.filter_by(id=pk).first() return task_statusdef get_total_status_num_by_task_id(task_id): total_number = db.session.query(func.count(TaskStatusInfo.id).label('total_number'), func.count(distinct(TaskStatusInfo.apple_account)).label('actual_account_total') ).filter_by(task_id=task_id).first() return total_numberdef get_completed_status_by_task_id(task_id): completed_number = db.session.query(func.count(TaskStatusInfo.id).label('completed_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_completed_number')).filter_by(task_id=task_id, status=1).first() return completed_numberdef get_exception_status_by_task_id(task_id): exception_number = db.session.query(func.count(TaskStatusInfo.id).label('exception_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_exception_number')).filter_by(task_id=task_id, status=2).first() return exception_numberdef get_run_status_by_task_id(task_id): run_number = db.session.query(func.count(TaskStatusInfo.id).label('run_number'), func.count(distinct(TaskStatusInfo.apple_account)).label( 'actual_run_number')).filter_by(task_id=task_id, status=0).first() return run_numberdef get_task_status_by_udid_account_task_id(udid, account, task_id): task_status = TaskStatusInfo.query.filter_by(udid=udid, apple_account=account, task_id=task_id).order_by( TaskStatusInfo.create_time.desc()).first() return task_statusdef main(): passa =1if __name__ == '__main__': main() Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>haha</tag>
      </tags>
  </entry>
</search>
