<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python unicode和str拼接报错原因]]></title>
    <url>%2F2018%2F07%2F25%2FPython%20unicode%E5%92%8Cstr%E6%8B%BC%E6%8E%A5%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[首先来看一段代码 一、例子123456789101112131415161718192021222324# -*- coding: utf-8 -*-a1 = u'你好'b1 = '中文' &lt;!--more--&gt;print(a1+b1) # 报错a2 = u'你好'b2 = '中文' + a.encode('utf-8')print(b2) # 正常输出type(b2) # stra3 = u'http'b3 = 'abc' + aprint(b3) # 正常输出type(b3) # unicode a1,a2,a3都是unicode对象，unicode是一种编码标准，具体的实现可能是utf-8，utf-16，gbk等等，这就是中文字符串和unicode有密切关系的原因。python内部使用两个字节存储一个unicode对象（unicode对象并不只能是字符串，这两个字节还可以存其他内容），为什么要用unicode而不用str呢，因为中文转码的缘故，因为unicode的优点是便于跨平台。 b1 是str对象，中文字符串。存储方式是字节码。字节码是怎么存的：如果这行代码在python解释器中输入&amp;运行，那么s的格式就是解释器的编码格式；如果这行代码是在源码文件中写入、保存然后执行，那么解释器载入代码时就将s初始化为文件指定编码(比如py文件开头那行的utf-8)； 下面这两种方式都是表示unicode对象 12s1 = u'中文' # s1: &lt;type 'unicode'&gt;s2 = unicode('中文', 'utf-8') # utf8是在指定解码方式, s2: &lt;type 'unicode'&gt; python解释器中 如果 将一个 普通字符串 和 unicode对象字符串 拼接，会默认将普通字符串 用decode(‘ascii’)解码成unicode对象。为什么是用 ascii的方式解码呢，因为这里用的是python的默认编码,也就是defaultencoding = ascii。 所以，如果这个普通字符串 包含中文的话，就会报错，因为用ascii码去解码中文是不够用的。(中文得用unicode解码)。 二、正确的str对象和unicode对象拼接方式只要注意正确的decode、encode方式，统一编码后就能顺利地拼接了。123456789101112# -*- coding: utf-8 -*- s1 = '中文's2 = u'你好'print s1 + unicode(s2, 'utf-8') # 中文你好print s1 + s2.decode('utf-8') # 中文你好print s1.encode('utf-8') + s2 # 中文你好 print type(s1) # &lt;type 'str'&gt;print type(s2) # &lt;type 'unicode'&gt;print type(s1.decode('utf-8')) # &lt;type 'unicode'&gt;print type(s2.encode('utf-8')) # &lt;type 'str'&gt; 对于str要注意当前环境编码方式，也许是控制台那种设定好了的，也许是你自己在代码中指定的。对于unicode对象，一般都是decode得到的，像直接【u’你好’】这种其实不是很常见，所以要注意字符串来源是什么编码，比如从gbk文件或utf8文件中读入的。 参考自： https://blog.csdn.net/index20001/article/details/78974814 https://blog.csdn.net/qq_31739317/article/details/75257726]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python时间格式转换(时间戳、日期、时间、字符串)]]></title>
    <url>%2F2018%2F07%2F24%2FPython%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2(%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2)%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[在工作中我们常会对时间戳以及日期时间等格式进行转换，下面介绍了一些常用的Python时间的转换方法，方便以后查询 一、str类型的日期转换为时间戳1234567891011121314# -*- coding: utf-8 -*-import timefrom datetime import datetimetss1 = '2013-10-10 23:40:00'# 转为时间数组timeArray = time.strptime(tss1, "%Y-%m-%d %H:%M:%S")# timeArray可以调用tm_year等print timeArray # time.struct_time# 转为时间戳timeStamp = int(time.mktime(timeArray))print timeStamp # 1381419600 二、时间戳转换:10位（秒级）和13位（毫秒级）时间戳123456789101112131415161718# -*- coding: utf-8 -*-import timefrom datetime import datetimenow_timestamp = time.time()print 'now_timestamp', now_timestamp, type(now_timestamp)# now_timestamp 1532447792.62 &lt;type 'float'&gt;seconds = int(now_timestamp)print '10位秒级', seconds# 10位秒级 1532447792millis1 = int(round(now_timestamp * 1000))print '13位毫秒级1', millis1, type(millis1)# 13位毫秒级1 1532447792615 &lt;type 'long'&gt;millis2 = '%.f' % (now_timestamp * 1000)print '13位毫秒级2', millis2, type(millis2)# 13位毫秒级2 1532447792615 &lt;type 'str'&gt; 三、更改str类型日期的显示格式1234567891011121314# -*- coding: utf-8 -*-import timefrom datetime import datetimetss2 = "2013-10-10 23:40:00"# 转为数组timeArray = time.strptime(tss2, "%Y-%m-%d %H:%M:%S")# 转为其它格式otherStyleTime = time.strftime("%Y/%m/%d %H:%M:%S", timeArray)print otherStyleTime # 2013/10/10 23:40:00tss3 = "2013/10/10 23:40:00"timeArray = time.strptime(tss3, "%Y/%m/%d %H:%M:%S")otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)print otherStyleTime # 2013-10-10 23:40:00 四、时间戳转换为指定格式的日期12345678910111213141516171819# -*- coding: utf-8 -*-import timefrom datetime import datetime# 使用timetimeStamp = 1381419600timeArray = time.localtime(timeStamp)print timeArray # time.struct_timeotherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)print otherStyleTime # 2013--10--10 23:40:00# 使用datetimeutc_data = datetime.utcfromtimestamp(now_timestamp)print 'utc时间', utc_data, type(utc_data)# utc时间 2018-07-24 15:59:49.501000 &lt;type 'datetime.datetime'&gt;local_data = datetime.fromtimestamp(now_timestamp)print 'local时间', local_data, type(local_data)# local时间 2018-07-24 23:59:49.501000 &lt;type 'datetime.datetime'&gt; 五、时间戳转换为指定格式的日期123456789101112131415# -*- coding: utf-8 -*-import timefrom datetime import datetime# 获取当前时间戳now = int(time.time())timeArray = time.localtime(now)otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)print otherStyleTime # 2018--07--24 23:59:49# 获取当前时间，数组格式now = datetime.now()otherStyleTime = now.strftime("%Y--%m--%d %H:%M:%S")print otherStyleTime # 2018--07--24 23:59:49 六、获取本地时区当天0点时间戳和时间的一种方法123456789# -*- coding: utf-8 -*-import timefrom datetime import datetime# 方法1print time.mktime(datetime.now().date().timetuple()) # 1532534400.0today = datetime.today()# 方法2print datetime(today.year, today.month, today.day, 0, 0, 0) # 2018-07-26 00:00:00]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>时间</tag>
      </tags>
  </entry>
</search>
